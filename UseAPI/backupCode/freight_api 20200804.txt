using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.IO;
using System.Net;
using System.Text;
using System.Data;
using System.Collections.Specialized;
using iTextSharp.text.pdf;
using iTextSharp.text;
using iTextSharp.text.pdf.parser;

namespace UseAPI
{
    public class freight_API
    {
        public string shipperZip { get; set; }
        public string  consigneeZip { get; set; }
        public string weight { get; set; }
        public string freightClass { get; set; }
        public string callJSONPlaceholder()
        {
            string strURL = string.Format("https://jsonplaceholder.typicode.com/posts");
            WebRequest requestObjPost = WebRequest.Create(strURL);
            requestObjPost.Method = "POST";
            requestObjPost.ContentType = "application/json";

            string postData = "{\"title\":\"testdata\",\"body\":\"testbody\",\"userid\":\"50\"}";
            var result = "None";
            using (var streamWriter = new StreamWriter(requestObjPost.GetRequestStream()))
            {
                streamWriter.Write(postData);
                streamWriter.Flush();
                streamWriter.Close();

                var httpResponse = (HttpWebResponse)requestObjPost.GetResponse();

                using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                {
                    result = streamReader.ReadToEnd();
                }
            }

            return result;
        }

        public DataTable GetTargetFreight(freight_API freightValues)
        {
            string strURL = string.Format("http://targetfmitms.com/index.php?p=api&r=xml&c=rater&m=quote");
            String pwd = String.Format("{0}:{1}", "d5db5543-af3c-4eb6-8073-fc0e98195f06", "");
            Byte[] authBytes = Encoding.UTF8.GetBytes(pwd.ToCharArray());
            var result = "None";
            string postData = "";

            Dictionary<string, string> postValues = new Dictionary<string, string>();
            postValues.Add("general[code]", "ASPENLIC");
            postValues.Add("general[shipper]", freightValues.shipperZip);
            postValues.Add("general[consignee]", freightValues.consigneeZip);
            postValues.Add("general[shipment_type]", "Outbound/Prepaid");
            postValues.Add("units[0][num_of]", "1");
            postValues.Add("units[0][type]", "Pallet");
            postValues.Add("units[0][stack]", "No");
            postValues.Add("units[0][length]", "3");
            postValues.Add("units[0][width]", "3");
            postValues.Add("units[0][height]", "3");
            postValues.Add("units[0][products][0][pieces]", "1");
            postValues.Add("units[0][products][0][weight]", freightValues.weight);
            postValues.Add("units[0][products][0][class]", freightValues.freightClass);

            foreach (string key in postValues.Keys)
            {
                postData += HttpUtility.UrlEncode(key) + "="
                      + HttpUtility.UrlEncode(postValues[key]) + "&";
            }

            HttpWebRequest requestObjPost = (HttpWebRequest)HttpWebRequest.Create(strURL);
            requestObjPost.Method = "POST";
            byte[] byteArray = Encoding.ASCII.GetBytes(postData);
            requestObjPost.ContentType = "application/x-www-form-urlencoded";
            //requestObjPost.ContentLength = byteArray.Length;
            requestObjPost.Headers[HttpRequestHeader.Authorization] = $"Basic { Convert.ToBase64String(authBytes)}";

            using (var streamWriter = new StreamWriter(requestObjPost.GetRequestStream()))
            {
                streamWriter.Write(postData);
                streamWriter.Flush();
                streamWriter.Close();

                var httpResponse = (HttpWebResponse)requestObjPost.GetResponse();

                using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                {
                    result = streamReader.ReadToEnd();
                }
            }

            DataSet ds = new DataSet();
            ds.ReadXml(new MemoryStream(System.Text.ASCIIEncoding.Default.GetBytes(result)));
            result = "";

            //  DataTable dt = new DataTable("Branches");  
            DataTable dt = new DataTable("FrerightQuotes");
            DataTable dtRates = new DataTable("Rates");
            dt.Columns.Add("CarrierID", typeof(string));
            dt.Columns.Add("CarrierName", typeof(string));
            dt.Columns.Add("ShipmentDate", typeof(string));
            dt.Columns.Add("ServiceDays", typeof(string));
            dt.Columns.Add("DeliveryDate", typeof(string));
            dt.Columns.Add("Distance", typeof(string));
            dt.Columns.Add("FreightCost", typeof(string));
            dt.Columns.Add("FuelSurcharge", typeof(string));
            dt.Columns.Add("AccessorialCosts", typeof(string));
            dt.Columns.Add("EstimateCost", typeof(string));
            dt.Columns.Add("TrueCost", typeof(string));
            dt.Columns.Add("ServiceType", typeof(string));
            dt.Columns.Add("ShipmentMethod", typeof(string));

            for (int i = 0; i < ds.Tables["carriers"].Rows.Count; i++)
            {
                dt.Rows.Add();
                if (ds.Tables["carriers"].Columns.Contains("scac"))
                {
                    dt.Rows[i]["CarrierID"] = (ds.Tables["carriers"].Rows[i]["scac"].ToString());
                }
                if (ds.Tables["carriers"].Columns.Contains("name"))
                {
                    dt.Rows[i]["CarrierName"] = (ds.Tables["carriers"].Rows[i]["name"].ToString());
                }
                if (ds.Tables["carriers"].Columns.Contains("move_type"))
                {
                    dt.Rows[i]["ServiceType"] = (ds.Tables["carriers"].Rows[i]["move_type"].ToString());
                }
                if (ds.Tables["carriers"].Columns.Contains("trans_time"))
                {
                    dt.Rows[i]["ServiceDays"] = (ds.Tables["carriers"].Rows[i]["trans_time"].ToString());
                }

                if (ds.Tables["carriers"].Columns.Contains("transit_supported"))
                {
                    dt.Rows[i]["ShipmentMethod"] = (ds.Tables["carriers"].Rows[i]["transit_supported"].ToString());
                }
                if (ds.Tables["carriers"].Columns.Contains("acc_total"))
                {
                    dt.Rows[i]["AccessorialCosts"] = (ds.Tables["carriers"].Rows[i]["acc_total"].ToString());
                }

                // rates 
                if (ds.Tables["rate"].Columns.Contains("freight"))
                {
                    dt.Rows[i]["FreightCost"] = (ds.Tables["rate"].Rows[i]["freight"].ToString());
                }
                if (ds.Tables["rate"].Columns.Contains("fuel"))
                {
                    dt.Rows[i]["FuelSurcharge"] = (ds.Tables["rate"].Rows[i]["fuel"].ToString());
                }
                if (ds.Tables["rate"].Columns.Contains("true_cost"))
                {
                    dt.Rows[i]["TrueCost"] = (ds.Tables["rate"].Rows[i]["true_cost"].ToString());
                }

                if (ds.Tables["rate"].Columns.Contains("fmt_true_cost"))
                {
                    dt.Rows[i]["EstimateCost"] = (ds.Tables["rate"].Rows[i]["fmt_true_cost"].ToString());
                }
            }

            foreach (DataRow dr in dt.Rows)
            {
                result += $" {dr["CarrierID"].ToString()} --- ";
                result += $" {dr["CarrierName"].ToString()} --- ";
                result += $" {dr["ServiceType"].ToString()} --- ";
                result += $" {dr["ServiceDays"].ToString()} --- ";
                result += $" {dr["ShipmentMethod"].ToString()} --- ";
                result += $" {dr["FreightCost"].ToString()} --- ";
                result += $" {dr["FuelSurcharge"].ToString()} --- ";
                result += $" {dr["TrueCost"].ToString()} --- ";
                result += $" {dr["EstimateCost"].ToString()} --- ";
                result += $" {dr["AccessorialCosts"].ToString()} --- ";
            }

            return dt;
        }

        public string ExecuteBillsOfLading(string queryID)
        {
            string strURL = string.Format("Http://targetfmitms.com/index.php?p=api&r=xml&c=billoflading&m=execute");
            String pwd = String.Format("{0}:{1}", "d5db5543-af3c-4eb6-8073-fc0e98195f06", "");
            Byte[] authBytes = Encoding.UTF8.GetBytes(pwd.ToCharArray());
            var result = "None";
            string postData = "";

            Dictionary<string, string> postValues = new Dictionary<string, string>();
            postValues.Add("carrier[query_id]", queryID);
            postValues.Add("carrier[carrier_scac]", "FXNL");
            postValues.Add("general[pro]", "pro number");
            postValues.Add("general[saved_bol]", "");
            postValues.Add("general[bol]", "");
            postValues.Add("general[po]", "");
            postValues.Add("general[so]", "");
            postValues.Add("general[ref]", "");
            postValues.Add("general[warehouse]", "ASPENLIC");
            postValues.Add("general[direction]", "Outbound/Prepaid");
            postValues.Add("general[customer_date]", "01/01/2020");
            postValues.Add("location[shipper][name]", "Southeastern Freight");
            postValues.Add("location[shipper][address1]", "111 Test Ave");
            postValues.Add("location[shipper][address2]", "ris address 2");
            postValues.Add("location[shipper][city]", "Atlanta");
            postValues.Add("location[shipper][state]", "GA");
            postValues.Add("location[shipper][zip]", "30319");
            postValues.Add("location[shipper][country]", "USA");
            postValues.Add("location[shipper][contact_name]", "ris contact name");
            postValues.Add("location[shipper][contact_phone]", "111-222-3333");
            postValues.Add("location[shipper][contact_fax]", "444-555-7777");
            postValues.Add("location[shipper][contact_email]", "111 Test Ave");
            postValues.Add("location[shipper][save]", "False");
            postValues.Add("location[consignee][name]", "CSoutheastern Freight");
            postValues.Add("location[consignee][address1]", "C111 Test Ave");
            postValues.Add("location[consignee][address2]", "cris address 2");
            postValues.Add("location[consignee][city]", "CAtlanta");
            postValues.Add("location[consignee][state]", "CGA");
            postValues.Add("location[consignee][zip]", "C30319");
            postValues.Add("location[consignee][country]", "USA");
            postValues.Add("location[consignee][contact_name]", "ris contact name");
            postValues.Add("location[consignee][contact_phone]", "111-222-3333");
            postValues.Add("location[consignee][contact_fax]", "444-555-7777");
            postValues.Add("location[consignee][contact_email]", "111 Test Ave");
            postValues.Add("location[consignee][save]", "False");
            postValues.Add("location[billing][name]", "BSoutheastern Freight");
            postValues.Add("location[billing][address1]", "B111 Test Ave");
            postValues.Add("location[billing][address2]", "Bris address 2");
            postValues.Add("location[billing][city]", "BAtlanta");
            postValues.Add("location[billing][state]", "BGA");
            postValues.Add("location[billing][zip]", "B30319");
            postValues.Add("location[billing][country]", "USA");
            postValues.Add("location[billing][contact_name]", "ris contact name");
            postValues.Add("location[billing][contact_phone]", "111-222-3333");
            postValues.Add("location[billing][contact_fax]", "444-555-7777");
            postValues.Add("location[billing][contact_email]", "111 Test Ave");
            postValues.Add("location[billing][save]", "False");
            postValues.Add("units[0][details][pieces]", "1");
            postValues.Add("units[0][details][stack]", "False");
            postValues.Add("units[0][details][type]", "Pallet");
            postValues.Add("units[0][details][length]", "3");
            postValues.Add("units[0][details][width]", "3");
            postValues.Add("units[0][details][height]", "3");
            postValues.Add("units[0][products][0][product]", "Gas");
            postValues.Add("units[0][products][0][pieces]", "1");
            postValues.Add("units[0][products][0][uom]", "Pallet");
            postValues.Add("units[0][products][0][nmfc]", "nmfc");
            postValues.Add("units[0][products][0][sub_nmfc]", "sub nmfc");
            postValues.Add("units[0][products][0][class]", "110");
            postValues.Add("units[0][products][0][weight]","1119");
            postValues.Add("units[0][products][0][hazmat]", "");
            postValues.Add("units[0][products][0][hazmat][class]", "110");
            postValues.Add("units[0][products][0][hazmat][un_num]", "11012");
            postValues.Add("units[0][products][0][hazmat][group]", "11013");
            postValues.Add("units[0][products][0][hazmat][emergency]", "7705551111");

            foreach (string key in postValues.Keys)
            {
                postData += HttpUtility.UrlEncode(key) + "="
                      + HttpUtility.UrlEncode(postValues[key]) + "&";
            }
            HttpWebRequest requestObjPost = (HttpWebRequest)HttpWebRequest.Create(strURL);
            requestObjPost.Method = "POST";
            byte[] byteArray = Encoding.ASCII.GetBytes(postData);
            requestObjPost.ContentType = "application/x-www-form-urlencoded";
            requestObjPost.Headers[HttpRequestHeader.Authorization] = $"Basic { Convert.ToBase64String(authBytes)}";

            using (var streamWriter = new StreamWriter(requestObjPost.GetRequestStream()))
            {
                streamWriter.Write(postData);
                streamWriter.Flush();
                streamWriter.Close();

                var httpResponse = (HttpWebResponse)requestObjPost.GetResponse();

                using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                {
                    result = streamReader.ReadToEnd();
                }
            }

            DataSet ds = new DataSet();
            ds.ReadXml(new MemoryStream(System.Text.ASCIIEncoding.Default.GetBytes(result)));

            string bolId = "0";
            string bolDate = "20200101";

            for (int i = 0; i < ds.Tables["body"].Rows.Count; i++)
            {

                if (ds.Tables["body"].Columns.Contains("bolId"))
                {
                    bolId = (ds.Tables["body"].Rows[i]["bolId"].ToString());
                }
                if (ds.Tables["body"].Columns.Contains("date"))
                {
                    bolDate = (ds.Tables["body"].Rows[i]["date"].ToString());
                }
            }
            string bolPDF = PrintBillOfLading(bolId, bolDate);
            //return $"BOL ID {bolId} BOL Date {bolDate} BOLPDF {bolPDF} Response Body {result}"; 
            return bolPDF;
        }

        public string PrintBillOfLading(string BolId, string BolDate)
        {

            string strURL = string.Format($"Http://targetfmitms.com/index.php?p=api&r=text&c=billoflading&m=pdf&d={BolId}/{BolDate}");
            String pwd = String.Format("{0}:{1}", "d5db5543-af3c-4eb6-8073-fc0e98195f06", "");
            Byte[] authBytes = Encoding.UTF8.GetBytes(pwd.ToCharArray());
            DateTime datetimmstamp = DateTime.Now;
            string fn = $"BillOfLading_BOLId{BolId}_BOLDate{BolDate}.pdf";
            string fp = $@"C:\_TargetBOL\{fn}";

            HttpWebRequest req = (HttpWebRequest)HttpWebRequest.Create(strURL);
            req.ContentType = "application/pdf";
            req.Method = "Post";
            req.Headers[HttpRequestHeader.Authorization] = $"Basic {Convert.ToBase64String(authBytes)}";

            using (HttpWebResponse resp = (HttpWebResponse)req.GetResponse())
            {
                using (Stream str = resp.GetResponseStream())
                {
                    using (var mm = new MemoryStream())
                    {
                        str.CopyTo(mm);
                        byte[] b = mm.ToArray();
                        FileStream fs = new FileStream(fp, FileMode.Create, FileAccess.Write);

                        if (fs.CanWrite)
                        {
                            fs.Write(b, 0, b.Length);
                        }

                        fs.Flush();
                        fs.Close();
                    }
                }
            }
            return $"{fn}";

        }

        public void SaveToOuptut(Stream dataStream, string BolId, string BolDate)
        {
            //dataStream.Seek(0, SeekOrigin.Begin);

            string filename = $"BillOfLading{BolId}_{BolDate}.pdf";
            string filepath = $@"C:\Projects\_archive\{filename}";
            
            FileStream fileout = File.Create(filepath);
            const int chunk = 512;
            byte[] buffer = new byte[512];

            int bytesread = dataStream.Read(buffer, 0, chunk);
            

            while (bytesread == chunk)
            {
                HttpContext.Current.Response.OutputStream.Write(buffer, 0, chunk);
                fileout.Write(buffer, 0, chunk);
                bytesread = dataStream.Read(buffer, 0, chunk);
            }

            HttpContext.Current.Response.OutputStream.Write(buffer, 0, bytesread);
            fileout.Write(buffer, 0, bytesread);
            fileout.Flush();
            fileout.Close();

            HttpContext.Current.Response.ContentType = "application/pdf";

        }

        public DataTable GetTargetFreightwithBOL(freight_API freightValues)
        {
            string strURL = string.Format("http://www.targetfmitms.com/?p=api&r=xml&c=rater&m=lcc");
            String pwd = String.Format("{0}:{1}", "d5db5543-af3c-4eb6-8073-fc0e98195f06", "");
            Byte[] authBytes = Encoding.UTF8.GetBytes(pwd.ToCharArray());
            var result = "None";
            string postData = "";
            string queryID = "0";

            Dictionary<string, string> postValues = new Dictionary<string, string>();
            postValues.Add("general[code]", "ASPENLIC");
            postValues.Add("general[shipper]", freightValues.shipperZip);
            postValues.Add("general[consignee]", freightValues.consigneeZip);
            postValues.Add("general[shipment_type]", "Outbound/Prepaid");
            postValues.Add("units[0][num_of]", "1");
            postValues.Add("units[0][type]", "Pallet");
            postValues.Add("units[0][stack]", "No");
            postValues.Add("units[0][length]", "3");
            postValues.Add("units[0][width]", "3");
            postValues.Add("units[0][height]", "3");
            postValues.Add("units[0][products][0][pieces]", "1");
            postValues.Add("units[0][products][0][weight]", freightValues.weight);
            postValues.Add("units[0][products][0][class]", freightValues.freightClass);

            foreach (string key in postValues.Keys)
            {
                postData += HttpUtility.UrlEncode(key) + "="
                      + HttpUtility.UrlEncode(postValues[key]) + "&";
            }

            HttpWebRequest requestObjPost = (HttpWebRequest)HttpWebRequest.Create(strURL);
            requestObjPost.Method = "POST";
            byte[] byteArray = Encoding.ASCII.GetBytes(postData);
            requestObjPost.ContentType = "application/x-www-form-urlencoded";
            requestObjPost.Headers[HttpRequestHeader.Authorization] = $"Basic { Convert.ToBase64String(authBytes)}";

            using (var streamWriter = new StreamWriter(requestObjPost.GetRequestStream()))
            {
                streamWriter.Write(postData);
                streamWriter.Flush();
                streamWriter.Close();

                var httpResponse = (HttpWebResponse)requestObjPost.GetResponse();

                using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                {
                    result = streamReader.ReadToEnd();
                }
            }

            DataSet ds = new DataSet();
            ds.ReadXml(new MemoryStream(System.Text.ASCIIEncoding.Default.GetBytes(result)));
            result = "";
  
            DataTable dt = new DataTable("FrerightQuotes");
            DataTable dtRates = new DataTable("Rates");
            dt.Columns.Add("CarrierID", typeof(string));
            dt.Columns.Add("CarrierName", typeof(string));
            dt.Columns.Add("ShipmentDate", typeof(string));
            dt.Columns.Add("ServiceDays", typeof(string));
            dt.Columns.Add("DeliveryDate", typeof(string));
            dt.Columns.Add("Distance", typeof(string));
            dt.Columns.Add("FreightCost", typeof(string));
            dt.Columns.Add("FuelSurcharge", typeof(string));
            dt.Columns.Add("AccessorialCosts", typeof(string));
            dt.Columns.Add("EstimateCost", typeof(string));
            dt.Columns.Add("TrueCost", typeof(string));
            dt.Columns.Add("ServiceType", typeof(string));
            dt.Columns.Add("ShipmentMethod", typeof(string));
            dt.Columns.Add("QueryID", typeof(string));            

            for (int i = 0; i < ds.Tables["body"].Rows.Count; i++)
            {

                if (ds.Tables["body"].Columns.Contains("query_id"))
                {
                    queryID  = (ds.Tables["body"].Rows[i]["query_id"].ToString());
                }
            }

            for (int i = 0; i < ds.Tables["carriers"].Rows.Count; i++)
            {
                dt.Rows.Add();
                if (ds.Tables["carriers"].Columns.Contains("scac"))
                {
                    dt.Rows[i]["CarrierID"] = (ds.Tables["carriers"].Rows[i]["scac"].ToString());
                }
                if (ds.Tables["carriers"].Columns.Contains("name"))
                {
                    dt.Rows[i]["CarrierName"] = (ds.Tables["carriers"].Rows[i]["name"].ToString());
                }
                if (ds.Tables["carriers"].Columns.Contains("move_type"))
                {
                    dt.Rows[i]["ServiceType"] = (ds.Tables["carriers"].Rows[i]["move_type"].ToString());
                }
                if (ds.Tables["carriers"].Columns.Contains("trans_time"))
                {
                    dt.Rows[i]["ServiceDays"] = (ds.Tables["carriers"].Rows[i]["trans_time"].ToString());
                }

                if (ds.Tables["carriers"].Columns.Contains("transit_supported"))
                {
                    dt.Rows[i]["ShipmentMethod"] = (ds.Tables["carriers"].Rows[i]["transit_supported"].ToString());
                }
                if (ds.Tables["carriers"].Columns.Contains("acc_total"))
                {
                    dt.Rows[i]["AccessorialCosts"] = (ds.Tables["carriers"].Rows[i]["acc_total"].ToString());
                }

                // rates 
                if (ds.Tables["rate"].Columns.Contains("freight"))
                {
                    dt.Rows[i]["FreightCost"] = (ds.Tables["rate"].Rows[i]["freight"].ToString());
                }
                if (ds.Tables["rate"].Columns.Contains("fuel"))
                {
                    dt.Rows[i]["FuelSurcharge"] = (ds.Tables["rate"].Rows[i]["fuel"].ToString());
                }
                if (ds.Tables["rate"].Columns.Contains("true_cost"))
                {
                    dt.Rows[i]["TrueCost"] = (ds.Tables["rate"].Rows[i]["true_cost"].ToString());
                }

                if (ds.Tables["rate"].Columns.Contains("fmt_true_cost"))
                {
                    dt.Rows[i]["EstimateCost"] = (ds.Tables["rate"].Rows[i]["fmt_true_cost"].ToString());
                }
                dt.Rows[i]["QueryID"] = queryID;
            }

            foreach (DataRow dr in dt.Rows)
            {
                result += $" {dr["CarrierID"].ToString()} --- ";
                result += $" {dr["CarrierName"].ToString()} --- ";
                result += $" {dr["ServiceType"].ToString()} --- ";
                result += $" {dr["ServiceDays"].ToString()} --- ";
                result += $" {dr["ShipmentMethod"].ToString()} --- ";
                result += $" {dr["FreightCost"].ToString()} --- ";
                result += $" {dr["FuelSurcharge"].ToString()} --- ";
                result += $" {dr["TrueCost"].ToString()} --- ";
                result += $" {dr["EstimateCost"].ToString()} --- ";
                result += $" {dr["AccessorialCosts"].ToString()} --- ";
                result += $" {dr["QueryID"].ToString()} --- ";
            }

            return dt;
        }
    }
}