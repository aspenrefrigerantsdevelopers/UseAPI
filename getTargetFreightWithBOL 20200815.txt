public DataTable GetTargetFreightwithBOL(freight_API freightValues)
        {
            string strURL = string.Format("http://www.targetfmitms.com/?p=api&r=xml&c=rater&m=lcc");
            String pwd = String.Format("{0}:{1}", "d5db5543-af3c-4eb6-8073-fc0e98195f06", "");
            Byte[] authBytes = Encoding.UTF8.GetBytes(pwd.ToCharArray());
            var result = "None";
            string postData = "";
            string queryID = "0";

            Dictionary<string, string> postValues = new Dictionary<string, string>();

            SqlParameter[] parameter = {
                new SqlParameter("@orderNumber",freightValues.orderNumber)
            };
            DataSet dsBOL = ExecuteProcedureReturnDataSet("Target_Carriers_GetOrderDetails", parameter);
            string numberOfunits = dsBOL.Tables[0].Rows[0].ItemArray[0].ToString();

            postValues.Add("general[code]", "ASPENLIC");
            postValues.Add("general[shipper]", freightValues.shipperZip);
            postValues.Add("general[consignee]", freightValues.consigneeZip);
            postValues.Add("general[shipment_type]", "Outbound/Prepaid");
            postValues.Add("units[0][num_of]", "1");
            postValues.Add("units[0][type]", "Pallet");
            postValues.Add("units[0][stack]", "No");
            postValues.Add("units[0][length]", "3");
            postValues.Add("units[0][width]", "3");
            postValues.Add("units[0][height]", "3");
            //postValues.Add("units[0][products][0][pieces]", "1");
            postValues.Add("units[0][products][0][pieces]", numberOfunits);
            postValues.Add("units[0][products][0][weight]", freightValues.weight);
            postValues.Add("units[0][products][0][class]", freightValues.freightClass);

            foreach (string key in postValues.Keys)
            {
                postData += HttpUtility.UrlEncode(key) + "="
                      + HttpUtility.UrlEncode(postValues[key]) + "&";
            }

            HttpWebRequest requestObjPost = (HttpWebRequest)HttpWebRequest.Create(strURL);
            requestObjPost.Method = "POST";
            byte[] byteArray = Encoding.ASCII.GetBytes(postData);
            requestObjPost.ContentType = "application/x-www-form-urlencoded";
            requestObjPost.Headers[HttpRequestHeader.Authorization] = $"Basic { Convert.ToBase64String(authBytes)}";

            using (var streamWriter = new StreamWriter(requestObjPost.GetRequestStream()))
            {
                streamWriter.Write(postData);
                streamWriter.Flush();
                streamWriter.Close();

                var httpResponse = (HttpWebResponse)requestObjPost.GetResponse();

                using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                {
                    result = streamReader.ReadToEnd();
                }
            }

            DataSet ds = new DataSet();
            ds.ReadXml(new MemoryStream(System.Text.ASCIIEncoding.Default.GetBytes(result)));
            result = "";
  
            DataTable dt = new DataTable("FrerightQuotes");
            DataTable dtRates = new DataTable("Rates");
            dt.Columns.Add("CarrierID", typeof(string));
            dt.Columns.Add("CarrierName", typeof(string));
            dt.Columns.Add("ShipmentDate", typeof(string));
            dt.Columns.Add("ServiceDays", typeof(string));
            dt.Columns.Add("DeliveryDate", typeof(string));
            dt.Columns.Add("Distance", typeof(string));
            dt.Columns.Add("FreightCost", typeof(string));
            dt.Columns.Add("FuelSurcharge", typeof(string));
            dt.Columns.Add("AccessorialCosts", typeof(string));
            dt.Columns.Add("EstimateCost", typeof(string));
            dt.Columns.Add("TrueCost", typeof(string));
            dt.Columns.Add("ServiceType", typeof(string));
            dt.Columns.Add("ShipmentMethod", typeof(string));
            dt.Columns.Add("QueryID", typeof(string));            

            for (int i = 0; i < ds.Tables["body"].Rows.Count; i++)
            {

                if (ds.Tables["body"].Columns.Contains("query_id"))
                {
                    queryID  = (ds.Tables["body"].Rows[i]["query_id"].ToString());
                }
            }

            for (int i = 0; i < ds.Tables["carriers"].Rows.Count; i++)
            {
                dt.Rows.Add();
                if (ds.Tables["carriers"].Columns.Contains("scac"))
                {
                    dt.Rows[i]["CarrierID"] = (ds.Tables["carriers"].Rows[i]["scac"].ToString());
                }
                if (ds.Tables["carriers"].Columns.Contains("name"))
                {
                    dt.Rows[i]["CarrierName"] = (ds.Tables["carriers"].Rows[i]["name"].ToString());
                }
                if (ds.Tables["carriers"].Columns.Contains("move_type"))
                {
                    dt.Rows[i]["ServiceType"] = (ds.Tables["carriers"].Rows[i]["move_type"].ToString());
                }
                if (ds.Tables["carriers"].Columns.Contains("trans_time"))
                {
                    dt.Rows[i]["ServiceDays"] = (ds.Tables["carriers"].Rows[i]["trans_time"].ToString());
                }

                if (ds.Tables["carriers"].Columns.Contains("transit_supported"))
                {
                    dt.Rows[i]["ShipmentMethod"] = (ds.Tables["carriers"].Rows[i]["transit_supported"].ToString());
                }
                if (ds.Tables["carriers"].Columns.Contains("acc_total"))
                {
                    dt.Rows[i]["AccessorialCosts"] = (ds.Tables["carriers"].Rows[i]["acc_total"].ToString());
                }

                // rates 
                if (ds.Tables["rate"].Columns.Contains("freight"))
                {
                    dt.Rows[i]["FreightCost"] = (ds.Tables["rate"].Rows[i]["freight"].ToString());
                }
                if (ds.Tables["rate"].Columns.Contains("fuel"))
                {
                    dt.Rows[i]["FuelSurcharge"] = (ds.Tables["rate"].Rows[i]["fuel"].ToString());
                }
                if (ds.Tables["rate"].Columns.Contains("true_cost"))
                {
                    dt.Rows[i]["TrueCost"] = (ds.Tables["rate"].Rows[i]["true_cost"].ToString());
                }

                if (ds.Tables["rate"].Columns.Contains("fmt_true_cost"))
                {
                    dt.Rows[i]["EstimateCost"] = (ds.Tables["rate"].Rows[i]["fmt_true_cost"].ToString());
                }
                dt.Rows[i]["QueryID"] = queryID;
            }

            foreach (DataRow dr in dt.Rows)
            {
                result += $" {dr["CarrierID"].ToString()} --- ";
                result += $" {dr["CarrierName"].ToString()} --- ";
                result += $" {dr["ServiceType"].ToString()} --- ";
                result += $" {dr["ServiceDays"].ToString()} --- ";
                result += $" {dr["ShipmentMethod"].ToString()} --- ";
                result += $" {dr["FreightCost"].ToString()} --- ";
                result += $" {dr["FuelSurcharge"].ToString()} --- ";
                result += $" {dr["TrueCost"].ToString()} --- ";
                result += $" {dr["EstimateCost"].ToString()} --- ";
                result += $" {dr["AccessorialCosts"].ToString()} --- ";
                result += $" {dr["QueryID"].ToString()} --- ";
            }

            return dt;
        }